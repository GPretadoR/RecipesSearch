//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `recipePlaceholderImage`.
    static let recipePlaceholderImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "recipePlaceholderImage")
    /// Image `shot`.
    static let shot = Rswift.ImageResource(bundle: R.hostingBundle, name: "shot")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "recipePlaceholderImage", bundle: ..., traitCollection: ...)`
    static func recipePlaceholderImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.recipePlaceholderImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shot", bundle: ..., traitCollection: ...)`
    static func shot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shot, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `InstructionsTableViewCell`.
    static let instructionsTableViewCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "InstructionsTableViewCell")
    /// Reuse identifier `RecipesCollectionViewCell`.
    static let recipesCollectionViewCell: Rswift.ReuseIdentifier<RecipesCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "RecipesCollectionViewCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 8 localization keys.
    struct localizable {
      /// Value: Calories: %@
      static let recipeDetailCaloriesLabelText = Rswift.StringResource(key: "recipeDetail.caloriesLabel.text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Carbs: %@
      static let recipeDetailCarbsLabelText = Rswift.StringResource(key: "recipeDetail.carbsLabel.text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Dish: %@
      static let recipeDetailInstructionsNameDishDefaultText = Rswift.StringResource(key: "recipeDetail.instructionsNameDish.defaultText", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter Recipe Name
      static let recipesSearchFieldPlacholder = Rswift.StringResource(key: "recipes.searchField.placholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Fats: %@
      static let recipeDetailFatsLabelText = Rswift.StringResource(key: "recipeDetail.fatsLabel.text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Proteins: %@
      static let recipeDetailProteinsLabelText = Rswift.StringResource(key: "recipeDetail.proteinsLabel.text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Search Recipes
      static let recipesNavigationTitle = Rswift.StringResource(key: "recipes.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Steps: %@
      static let recipeDetailInstructionsStepCountText = Rswift.StringResource(key: "recipeDetail.instructionsStepCount.text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Calories: %@
      static func recipeDetailCaloriesLabelText(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("recipeDetail.caloriesLabel.text", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recipeDetail.caloriesLabel.text"
        }

        let format = NSLocalizedString("recipeDetail.caloriesLabel.text", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Carbs: %@
      static func recipeDetailCarbsLabelText(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("recipeDetail.carbsLabel.text", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recipeDetail.carbsLabel.text"
        }

        let format = NSLocalizedString("recipeDetail.carbsLabel.text", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Dish: %@
      static func recipeDetailInstructionsNameDishDefaultText(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("recipeDetail.instructionsNameDish.defaultText", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recipeDetail.instructionsNameDish.defaultText"
        }

        let format = NSLocalizedString("recipeDetail.instructionsNameDish.defaultText", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Enter Recipe Name
      static func recipesSearchFieldPlacholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recipes.searchField.placholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recipes.searchField.placholder"
        }

        return NSLocalizedString("recipes.searchField.placholder", bundle: bundle, comment: "")
      }

      /// Value: Fats: %@
      static func recipeDetailFatsLabelText(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("recipeDetail.fatsLabel.text", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recipeDetail.fatsLabel.text"
        }

        let format = NSLocalizedString("recipeDetail.fatsLabel.text", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Proteins: %@
      static func recipeDetailProteinsLabelText(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("recipeDetail.proteinsLabel.text", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recipeDetail.proteinsLabel.text"
        }

        let format = NSLocalizedString("recipeDetail.proteinsLabel.text", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Search Recipes
      static func recipesNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recipes.navigation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recipes.navigation.title"
        }

        return NSLocalizedString("recipes.navigation.title", bundle: bundle, comment: "")
      }

      /// Value: Steps: %@
      static func recipeDetailInstructionsStepCountText(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("recipeDetail.instructionsStepCount.text", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recipeDetail.instructionsStepCount.text"
        }

        let format = NSLocalizedString("recipeDetail.instructionsStepCount.text", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 2 localization keys.
    struct main {
      /// en translation: Enter Recipe Name
      ///
      /// Locales: en
      static let aVh67DNHPlaceholder = Rswift.StringResource(key: "aVh-67-dNH.placeholder", tableName: "Main", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en
      static let zNdXfUIYText = Rswift.StringResource(key: "zNd-Xf-uIY.text", tableName: "Main", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: Enter Recipe Name
      ///
      /// Locales: en
      static func aVh67DNHPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aVh-67-dNH.placeholder", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "aVh-67-dNH.placeholder"
        }

        return NSLocalizedString("aVh-67-dNH.placeholder", tableName: "Main", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en
      static func zNdXfUIYText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zNd-Xf-uIY.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "zNd-Xf-uIY.text"
        }

        return NSLocalizedString("zNd-Xf-uIY.text", tableName: "Main", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RecipesViewController

      let bundle = R.hostingBundle
      let name = "Main"
      let recipeDetailViewController = StoryboardViewControllerResource<RecipeDetailViewController>(identifier: "RecipeDetailViewController")
      let recipesViewController = StoryboardViewControllerResource<RecipesViewController>(identifier: "RecipesViewController")
      let stepListViewController = StoryboardViewControllerResource<StepListViewController>(identifier: "StepListViewController")

      func recipeDetailViewController(_: Void = ()) -> RecipeDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: recipeDetailViewController)
      }

      func recipesViewController(_: Void = ()) -> RecipesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: recipesViewController)
      }

      func stepListViewController(_: Void = ()) -> StepListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: stepListViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().recipeDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'recipeDetailViewController' could not be loaded from storyboard 'Main' as 'RecipeDetailViewController'.") }
        if _R.storyboard.main().recipesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'recipesViewController' could not be loaded from storyboard 'Main' as 'RecipesViewController'.") }
        if _R.storyboard.main().stepListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'stepListViewController' could not be loaded from storyboard 'Main' as 'StepListViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
